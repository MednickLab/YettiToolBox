%A tool to output HRV information for consecuive periods of the same
%stage. Details:
%
% 
% The follwing rules are be applied:
% 1) find 2 minutes of a single stage (e.g., N2,N2,N2,N2)
% 2) check if the next 5-min are of the same stage (N2 x10). If there is any "sleep transition" (e.g., N2,N2, REM, N2, etc...), start again with #1. If so, select this as a "bin" and run HRV analysis on it and skip to #3.
% 3) continue as 2.
%
%The stage labels are:
% 0=W
% 1=N1
% 2=N2
% 3=N3/SWS
% 5=REM
clear
addpath('../')
priorToBinEpochs = 2;
binLengthInEpochs = 10;
epochLen = 30; %30 second epoch len

stageIDs = [0,1,2,3,5];

%Uncomment this if you want to import single file from Kubious
%HRVFiles = {'D:\Users\Ben\Downloads\XXYY'};
%Uncomment this if you want to import all the files at the location specified here:
pathToKubiousFiles = 'D:\Users\Ben\Downloads\';
HRVFiles = getFileNamesThatContain(pathToKubiousFiles,{'hrv'},'.mat');

%Import corrisponding stage information for the files:
stageFileFolder = 'D:\Users\Ben\Downloads\';%This is the folder location where we should look for stage files.


for f=1:length(HRVFiles)
    [~,fname,~] = fileparts(HRVFiles{1});
    stageFileName = fname(1:end-4);%Stage files must be named like xx.
    stageFile = [stageFileFolder stageFileName '.txt'];
    try
        sFile = readtable(stageFile,'delimiter','tab','ReadVariableNames',false);
        stages = sFile{:,2};
    catch err
        warning('No matching stage file for %s, skipping this record',stageFile);
        continue;
    end
    hrvFile = load(HRVFiles{f});
    rrPeaksInSecs = hrvFile.Res.HRV.Data.T_RRs{1};
    stageChunks = consecutiveValues(stages');
    validChunks = find(stageChunks.lengthSeqs>(priorToBinEpochs+binLengthInEpochs));
    HRVStruct = struct();
    idx = 1;
    cIdx = 0;
    for c = validChunks
        if ~any(stageChunks.vals(c)==stageIDs) %If this stage is not one we are interested in
            continue
        end
        cIdx = cIdx+1;
        splits = floor((stageChunks.lengthSeqs(c)-priorToBinEpochs)/binLengthInEpochs);
        s=1;
        for s=1:splits
            HRVStruct.continousStageID(idx) = cIdx;
            HRVStruct.binNumInContinousStage(idx) = s;
            HRVStruct.stage(idx) = stageChunks.vals(c);
            HRVStruct.startEpoch(idx) = stageChunks.startSeqs(c)+priorToBinEpochs+(s-1)*binLengthInEpochs;
            HRVStruct.endEpoch(idx) = HRVStruct.startEpoch(idx)+binLengthInEpochs;
            HRVStruct.startTime(idx) = HRVStruct.startEpoch(idx)*epochLen;                         
            HRVStruct.endTime(idx) = HRVStruct.endEpoch(idx)*epochLen;
            HRVStruct.duration(idx) = binLengthInEpochs*epochLen;
            rrPeaksInSecs = rrPeaksInSecs-rrPeaksInSecs(1); %start at 0 seconds
            rrForBin = rrPeaksInSecs(rrPeaksInSecs > HRVStruct.startTime(idx) & rrPeaksInSecs < HRVStruct.endTime(idx));
            HRVBinData = HRVPower(rrForBin);
            HRVStruct.nLF(idx) = HRVBinData.nLF;
            HRVStruct.nHF(idx) = HRVBinData.nHF;
            HRVStruct.HF(idx) = HRVBinData.HF;
            HRVStruct.LF(idx) = HRVBinData.LF;
            HRVStruct.meanHR(idx) = HRVBinData.meanHR;
            HRVStruct.TP(idx) = HRVBinData.TP;
            HRVStruct.lnTP(idx) = HRVBinData.lnTP;
            HRVStruct.LF_HF_Ratio(idx) = HRVBinData.LF_HF_Ratio;
            HRVStruct.lnHF(idx) = HRVBinData.lnHF;
            HRVStruct.lnLF(idx) = HRVBinData.ln;
            %Some other feilds
            idx = idx+1;
        end
    end
    HRVStruct = structRowsToCols(HRVStruct);
    HRVtable = struct2table(HRVStruct);
    writetable(HRVtable,[pathToKubiousFiles stageFileName '_HRVBinAnalysis.xlsx']);
end






